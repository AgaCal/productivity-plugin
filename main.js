/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ProductivityPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  reminders_enabled: true,
  frequency: 30,
  duration: 5
};
var ProductivityPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    const ribbonIconEl = this.addRibbonIcon("dice", "Get random task", (evt) => {
      new RandomizerModal(this.app).open();
    });
    this.addCommand({
      id: "open-randomizer",
      name: "Open Randomizer)",
      callback: () => {
        new RandomizerModal(this.app).open();
      }
    });
    this.addSettingTab(new ProductivitySettingTab(this.app, this));
    this.toggleReminders();
  }
  onunload() {
  }
  toggleReminders() {
    if (!this.settings.reminders_enabled) {
      if (this.reminder_interval_id != void 0) {
        clearInterval(this.reminder_interval_id);
      }
      this.reminder_interval_id = void 0;
      return;
    }
    if (this.reminder_interval_id != void 0) return;
    let assets_folder = [];
    this.reminder_interval_id = window.setInterval(() => {
      if (assets_folder.length == 0) {
        let folder = this.app.vault.getFolderByPath("assets");
        if (folder == null) {
          new import_obsidian.Notice("are you being productive?", this.settings.duration * 1e3);
        } else {
          folder.children.forEach((file) => {
            if (file instanceof import_obsidian.TFile) {
              assets_folder.push(file);
            }
          });
        }
      }
      if (assets_folder.length > 0) {
        let this_notice = new import_obsidian.Notice("are you being productive?", this.settings.duration * 1e3);
        this_notice.containerEl.createEl("img", {
          attr: {
            src: this.app.vault.getResourcePath(assets_folder[Math.floor(Math.random() * assets_folder.length)]),
            display: "block",
            objectfit: "cover"
          }
        });
      }
    }, this.settings.frequency * 60 * 1e3);
    this.registerInterval(this.reminder_interval_id);
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var RandomizerModal = class extends import_obsidian.Modal {
  constructor(app) {
    super(app);
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.setText("in progress!");
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var ProductivitySettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Reminder Settings").setHeading();
    new import_obsidian.Setting(containerEl).setName("Reminder Settings").addToggle(
      (cb) => cb.setValue(this.plugin.settings.reminders_enabled).onChange(async (value) => {
        this.plugin.settings.reminders_enabled = value;
        await this.plugin.saveSettings();
        this.plugin.toggleReminders();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Reminder Frequency").addSlider(
      (number) => number.setValue(this.plugin.settings.frequency).onChange(async (value) => {
        this.plugin.settings.frequency = 1 + 59 * value / 100;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Reminder Duration").addSlider(
      (number) => number.setValue(this.plugin.settings.duration).onChange(async (value) => {
        this.plugin.settings.duration = 1 + 59 * value / 100;
        await this.plugin.saveSettings();
      })
    );
  }
};
//# sourceMappingURL=data:application/json;base64,
